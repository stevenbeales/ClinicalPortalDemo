
<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd">
<html lang="en" class="ydn-content-bg">
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
                <meta name="description" content="The Exceptional Performance team has identified a number of best practices for making web pages fast.">
                        <link rel="stylesheet" type="text/css" href="http://l.yimg.com/a/combo?/yui/2.6.0/build/reset-fonts-grids/reset-fonts-grids.css&/yui/2.6.0/build/menu/assets/skins/sam/menu.css&/yui/2.6.0/build/button/assets/skins/sam/button.css&/yui/2.6.0/build/container/assets/skins/sam/container.css&/yui/2.6.0/build/resize/assets/skins/sam/resize.css&/yui/2.6.0/build/tabview/assets/skins/sam/tabview.css&/ydn/site/yui-2.6.0-treeview.css&/ydn/site/ydn-3947223076_49921.css&">

<link rel="stylesheet" type="text/css" href="https://s.yimg.com/kj/ydn/combo?/common/css/ydn_header-a4hJLDYG-piMw0QpAJKo-Q-.css&amp;/common/css/ydn_footer-kBKsNEG290FBj6FQsjmnyQ-.css&amp;/common/css/ydn_homepage-peeFugVXpZKH9oaG1c-e5A-.css">
<link rel="stylesheet" type="text/css" href="http://l.yimg.com/kj/ydn/homepage/css/ydn_searchsuggest-2533372822_1110.css"><link rel="apple-touch-icon" href="http://l.yimg.com/a/i/ydn/ydn-iphone.png" type="image/png">
<link rel="shortcut icon" href="http://l.yimg.com/a/i/ydn/favicon2.ico" type="image/x-icon"><!--[if IE 6]>
<link rel="stylesheet" type="text/css" media="screen" href="http://l.yimg.com/a/lib/ydn/site/ie6-140422.css">
<![endif]-->
<!--[if IE 7]>
<link rel="stylesheet" type="text/css" media="screen" href="http://l.yimg.com/a/lib/ydn/site/ie7-140042.css">
<![endif]-->
<script language="javascript" type="text/javascript" src="http://yui.yahooapis.com/3.3.0/build/yui/yui-min.js"></script>
<script type="text/javascript" src="http://l.yimg.com/kj/ydn/combo?/homepage/js/ydn_searchsuggest-3630824575_2384.js&amp;/homepage/js/bugreport-4212223899_2012.js"></script>       <title> Best Practices for Speeding Up Your Web Site</title>
    </head>

    <body>
        <div id="doc4" class="yui-t6">
            <div id="hd">
                <div id="ydn-header"><div id="ydn-header-univ-wrp" role="banner">
    <div class="ydn-header-univ-default">
    <link rel="stylesheet" type="text/css" href="http://l.yimg.com/zz/combo?kx/ucs/uh/css/287/yunivhead-min.css&kx/ucs/uh/css/221/logo-min.css&kx/ucs/notif_v2/css/145/notifications_v2-min.css&kx/ucs/mailcount/css/37/mail_preview-min.css&kx/ucs/search/css/190/search_all-min.css&kx/ucs/search/css/190/search_buttons-min.css&kx/ucs/breakingnews/css/12/breaking_news-min.css"><style>#yUnivHead {background:none;}
#ydn-header .ydn-header-univ-default{overflow:visible;}</style><div id="yUnivHead" class="yucs-en-us" data-lang="en-us" data-property="ydn" data-flight="1350126324">        <a href="#yuhead-search" class="yucs-skipto-search yucs-activate">Skip to search.</a>        <div id="yuhead-hd" class="yuhead-clearfix">        <div id="yuhead-mepanel-cont">            <ul id="yuhead-mepanel" class="yucs-toolbar yucs-activate"  aria-label="User Services"><li class="yuhead-me yuhead-nodivide yuhead-nopad">    <a class="yuhead-signup" href="https://us.lrd.yahoo.com/_ylt=AnliZU9C_CoCRW0bXQyU9UocHzsv/SIG=152fpp47a/EXP=1351335924/**https%3A//edit.yahoo.com/config/eval_register%3F.src=devnet%26.intl=us%26.lang=en-US%26.done=http%3A//developer.yahoo.com/performance/rules.html" target="_top" rel="nofollow">    <em>New User?</em> Register</a></li><li class="yuhead-me">        <a href="https://us.lrd.yahoo.com/_ylt=AgzmNulabvQzM39TnsBbUKUcHzsv/SIG=14r44gka8/EXP=1351335924/**https%3A//login.yahoo.com/config/login%3F.src=devnet%26.intl=us%26.lang=en-US%26.done=http%3A//developer.yahoo.com/performance/rules.html"  target="_top" rel="nofollow">    <em>Sign In</em></a></li><li class="yuhead-me"><a href="http://us.lrd.yahoo.com/_ylt=ArYHqzVJyykrjBu2Xj8KW8UcHzsv/SIG=121h2ii40/EXP=1351335924/**http%3A//help.yahoo.com/l/us/yahoo/helpcentral/" rel="nofollow" target="_top">Help</a></li></ul>                                </div>        <div id="yuhead-promo"><a href="http://us.lrd.yahoo.com/_ylt=AgOs.wV4v6u4jIaM9ISZfr0cHzsv/SIG=11qf1ebob/EXP=1351335924/**http%3A//www.yahoo.com/bin/set/%3Filc=37" target="_top" rel="nofollow">Make Y! My Homepage<abbr title="Yahoo!"></abbr></a></div>        <div id="yuhead-com-links-cont">            <ul id="yuhead-com-links" class="yucs-toolbar yucs-activate" aria-label="Yahoo! Services">                <li class="yucs-notifications yucs-notif-activate yuhead-com-link-item  yucs-wait">    <a class="ynotif-control yltasis" href="#" rel="nofollow" aria-haspopup="true" title="Notifications" aria-label="notifications" role="button"><span class="sp ynotif-ico-bell"></span><span class="ynotif-notif-count-con hide"><span class="ynotif-notif-count"></span></span>&nbsp;</a>    <div class="yucs-notif-panel hide"         data-ylt-bell="/;_ylt=AqLCvizpEOs_pnuZmrueXswcHzsv"        data-ylt-profile="/;_ylt=AvlLZZn.KXg37a3P.3NEOzkcHzsv"        data-ylt-app="/;_ylt=AjmaBdtt91tiL91pWwV1SOQcHzsv"        data-ylt-cta="/;_ylt=Ao7H0PKI7vUtn8uGDoqKZmwcHzsv"        data-ylt-pageurl="/;_ylt=AkhVoynN2WlZKJEevz2KOsccHzsv"          data-ylt-signin-cta="/;_ylt=AtssQ46Xy1I47qkiUTYKdkUcHzsv"        data-guid=""        data-crumb="hoatIRKrckp"        data-mode="2"        data-pagesize="10"                        data-view-more-txt="View More"        data-notif-user="A Yahoo! user"        data-intl="en-us"        data-yql-env=""        data-settings-tooltip="Settings"        data-app-aria-txt="App Icon"        data-view-all-txt="See All Notifications"        data-view-url="http://pulse.yahoo.com/y/notifications"        data-no-items-txt="There are currently no items."        data-no-notif-txt="You have no notifications."        data-notif-error-txt="Notifications with errors:"        data-get-notif-txt="Receive notifications when you comment or discuss content with friends on Yahoo!"        data-try-notif-txt="Learn more"        data-try-notif-link="http://help.yahoo.com//l/us/yahoo/comments/notifications/pnotification-03.html"        data-ylt-try-notif="/;_ylt=AmyQg.s2EPvjFgKs.O9rKOwcHzsv"         data-loading-txt="Loading..."        data-error-unavail-txt="Notifications are temporarily unavailable. Please try again later."        data-middleauth-nonotif-text="You have no new notifications."        data-password-verify-text="Please verify your password to view notifications."        data-authState="signedout"        data-signedout-cta-text="Sign In"        data-popup-login-url="https://login.yahoo.com/config/login_verify2?.pd=c%3DOIVaOGq62e5hAP8Tv..nr5E3&.src=sc"        data-signedout-message="Sign in to view notifications."        data-middleauth-text="You have new notifications.">        <div class="yucs-notif-title-bar yuhead-clearfix">            <span class="yucs-notif-panel-title">Notifications</span>             <a target="_blank" href="http://us.lrd.yahoo.com/_ylt=AuJEeLKKxFYWn.1lpfBVLl4cHzsv/SIG=12bqj4i7f/EXP=1351335924/**http%3A//help.yahoo.com/l/us/yahoo/comments/notifications" class="yucs-notif-tools">Help</a>        </div>        <ul class="yucs-notif-items-panel" role="menu">        </ul>    </div></li>                <li class="yuhead-com-link-item yucs-mailpreview-ancestor">    <a class="sp yltasis yuhead-ico-mail" href="http://us.lrd.yahoo.com/_ylt=AuF17MLI3j.OCaz7.R9c8oAcHzsv/SIG=123aiim3q/EXP=1351335924/**http%3A//mail.yahoo.com/%3F.intl=us%26.lang=en-US" rel="nofollow" target="_top">Mail</a><ul class="yucs-mail-preview-panel hide"    data-mail-txt="Mail"    data-mail-view="View all Yahoo! Mail"    data-mail-help-txt="Help"    data-mail-help-url="http://help.yahoo.com/l/us/yahoo/mail/ymail/"    data-mail-loading-txt="Loading..."    data-languagetag="en-us"    data-authstate="signedout"    data-middleauth-signin-text="Click here to view your mail"    data-popup-login-url="https://login.yahoo.com/config/login_verify2?.pd=c%3DOIVaOGq62e5hAP8Tv..nr5E3&.src=sc"    data-middleauthtext="You have {count} new mail."    data-yltmessage-link="http://us.lrd.yahoo.com/_ylt=AtLxsUHs03QJz8ippsTwzIUcHzsv/SIG=12f31sgop/EXP=1351335924/**http%3A//mrd.mail.yahoo.com/msg%3Fmid=%7BmsgID%7D%26fid=Inbox"    data-yltviewall-link="http://us.lrd.yahoo.com/_ylt=AgNmMr8_jUCswxWtg5f4shwcHzsv/SIG=11al0gqc3/EXP=1351335924/**http%3A//mail.yahoo.com/"    data-yltpanelshown="/;_ylt=AlKpcL5tAWF4DpKCE7hq_XQcHzsv"></ul></li><li class="yuhead-com-link-item">    <a href="http://my.yahoo.com/;_ylt=Ajz3cLnE_yi_60yDBRTlxrYcHzsv"     rel="nofollow"     target="_top">   My Y!    </a></li><li id="yuhead-com-home"><a class="sp yuhead-ico-home" href="http://us.lrd.yahoo.com/_ylt=Ahw77iASuRV5if9rdKyUCEIcHzsv/SIG=119lnaekf/EXP=1351335924/**http%3A//www.yahoo.com/" rel="nofollow" target="_top">Yahoo!</a></li>            </ul>        </div>    </div>    <div id="yuhead-bd" class="yuhead-clearfix">        <div class="yuhead-logo">   <style>      .yuhead-logo h2{        width:270px;        height:38px;        background-image:url(http://l.yimg.com/rz/uh/logos/nor/en-us/developer-092012-us.png);        _background-image:url(http://l.yimg.com/rz/uh/logos/nor/en-us/developer-092012-us-484852.gif);      }      .yuhead-logo a{        width:270px;        height:38px;      }      .yuhead-logo div.yuhead-comarketing {       width:270px;      }         </style>   <h2>      <a href="http://us.lrd.yahoo.com/_ylt=AjrWWaklWwSIdyPYRnn36iccHzsv/SIG=11fiu3t0v/EXP=1351335924/**http%3A//developer.yahoo.com/"       target="_top" tabindex="-1">         Yahoo! Developer Network      </a>   </h2>   <!-- comarketing component --></div>        <div id="yuhead-search">        <div id="yuhead-sform-cont" class="yuhead-s-web yuhead-search-form">        <form role="search" class="yucs-search yucs-activate" target="_top"    action="http://search.yahoo.com/search;_ylt=AoNILUhx6X.Aj70E26aL5bscHzsv" method="get"><table role="presentation">   <tbody role="presentation"><tr role="presentation"><td class="yucs-form-input" role="presentation"> <label for="yuhead-sform-searchfield">     <span>Search</span>             </label>                 <input autocomplete="off" type="text" class="sp yuhead-ico-mglass yuhead-search-hint yucs-search-field" name="p"                  data-sh="Search"                  data-satype="rich"                  data-gosurl=""                  id="yuhead-sform-searchfield"                 data-pubid="" /></td><td NOWRAP class="yucs-form-btn" role="presentation"><div class="yucs-btn-wrap">    <button class="yucs-sweb-btn" type="submit">Search Web</button></div>            </td>         </tr>        </tbody></table><input type="hidden" id="fr" name="fr" value="ush-ydn" /><!-- desktop device --></form>            </div>    </div>        <div     id="yucs-bnews"     class="yucs-activate slide hide"     data-linktarget="_top"    data-authstate="signedout"     data-lang="en-us"     data-property="ydn">        <h3>        <span class="title">Breaking News</span>        <a class="genericlink hide" href="http://news.yahoo.com">Visit Yahoo! News for the latest.</a>     </h3>    <span class="close">&times;<span class="offscreen">Close this window</span></span>     <p class="container">    </p>    </div>    </div>                    <!-- s2s -->    <!-- desktop device -->        </div>
	
<script language="javascript" src="http://l.yimg.com/zz/combo?kx/ucs/sts/js/290/skip-min.js&kx/ucs/uh/js/279/timestamp_library-min.js&kx/ucs/menu_utils/js/164/menu_utils_v2-min.js&kx/ucs/uh/js/267/aria_toolbar-min.js&kx/ucs/username/js/42/user_menu-min.js&kx/ucs/help/js/41/help_menu-min.js&kx/ucs/utility_link/js/20/utility_menu-min.js&kx/ucs/uh/js/262/logo_debug-min.js&kx/ucs/common/js/131/jsonp-cached-min.js&kx/ucs/notif_v2/js/161/notifications_bootstrap-min.js&kx/ucs/common/js/1/setup-min.js&kx/ucs/search/js/224/search-min.js&kx/ucs/search/js/210/search_text_dir-min.js&kx/ucs/common/js/133/jsonp-cached-min.js&kx/ucs/breakingnews/js/22/breaking_news-min.js&kx/ucs/uh/js/286/activate_library-min.js"></script>
<script language="javascript">
		YUI().use('node','event','event-mouseenter','substitute','oop','node-focusmanager','node', 'event', 'querystring-stringify', 'node-focusmanager', 'cookie', 'substitute', 'json','node','event','event-custom','event-valuechange','classnamemanager','node','event','cookie','node', function(Y) {});
</script>
    </div>
</div>
    <div id="ydn-nav-tier1-wrp" role="navigation">
        <ul id="ydn-nav-tier1"><li><a href="http://developer.yahoo.com/">Home</a><div></div></li><li class=" ydn-nav-sel"><a href="http://developer.yahoo.com/everything.html">APIs & Tools</a><div></div></li><li><a href="http://developer.yahoo.com/blogs">Blog</a><div></div></li><li class="last-tab "><a href="http://developer.yahoo.com/forums">Forums</a><div></div></li></ul>
    </div>        <div id="ydn-search-wrp" role="search">
            <form id="ydn-search" action="http://search.yahoo.com/search" method="GET">
                <label for="p">YDN Search Field</label>
                <input id="p" type="text" name="p">
                <input type="hidden" id="ei" name="ei" value="UTF-8">
                <input type="hidden" id="vs" name="vs" value="developer.yahoo.com,developer.yahoo.net">
                <input class="ydn-btn-gry" type="submit" value="Search YDN">
            </form>
		<ul id="ydn-nav-tier2">
		<li id="ydn-proj">
			<a href="https://developer.apps.yahoo.com/projects" title="My Projects">My Projects</a>
			<span></span> <!-- This span is for the My Projects icon as a background image. -->
		</li>
		<ul>
        </div>
</div>            </div>

            <div id="content-wrp">
                <div id="bd">
	            <h1>
		        	            </h1>
                    <div id="yui-main">
                        <div class="yui-b">
                            
<h2 id="page-nav">Best Practices for Speeding Up Your Web Site</h2>
<p>The Exceptional Performance team has identified a number of best practices for making web pages fast.
The list includes 35 best practices divided into 7 categories.</p>

<div id="promo">
<style>
  #bd #promo .tag-JavaScript { background: url(http://l.yimg.com/a/i/ydn/ydn-inline-nav-sep.gif) no-repeat; }
</style>
<div id="rules-filter">
   <p class="inlPrompt">Filter by category:</p>
    <ul onclick="YAHOO.YDNPerf.filterRules(event)">
      <li class="tag-Content">Content</li>
      <li class="tag-Server">Server</li>
      <li class="tag-Cookie">Cookie</li>
      <li class="tag-CSS">CSS</li>
      <li class="tag-JavaScript">JavaScript</li>
      <li class="tag-Images">Images</li>
      <li class="tag-Mobile">Mobile</li>
      <li class="tag-All">All</li>
    </ul>
</div>

<ol id="rules-list">
  <li><a class="Content" href="rules.html#num_http">Make Fewer HTTP Requests</a></li>
  <li><a class="Server"  href="rules.html#cdn">Use a Content Delivery Network (CDN)</a></li>
  <li><a class="Server"  href="rules.html#expires">Add Expires or Cache-Control Header</a></li>
  <li><a class="Server"  href="rules.html#gzip">Gzip Components</a></li>
  <li><a class="CSS"     href="rules.html#css_top">Put Stylesheets at Top</a></li>
  <li><a class="JavaScript" href="rules.html#js_bottom">Put Scripts at Bottom</a></li>
  <li><a class="CSS"     href="rules.html#css_expressions">Avoid CSS Expressions</a></li>
  <li><a class="JavaScript css" href="rules.html#external">Make JavaScript and CSS External</a></li>
  <li><a class="Content" href="rules.html#dns_lookups">Reduce DNS Lookups</a></li>
  <li><a class="JavaScript css" href="rules.html#minify">Minify JavaScript and CSS</a></li>
  <li><a class="Content" href="rules.html#redirects">Avoid Redirects</a></li>
  <li><a class="JavaScript" href="rules.html#js_dupes">Remove Duplicate Scripts</a></li>
  <li><a class="Server"  href="rules.html#etags">Configure ETags</a></li>
  <li><a class="Content" href="rules.html#cacheajax">Make Ajax Cacheable</a></li>
  <li><a class="Server"  href="rules.html#flush">Flush Buffer Early</a></li>
  <li><a class="Server"  href="rules.html#ajax_get">Use GET for Ajax Requests</a></li>
  <li><a class="Content" href="rules.html#postload">Postload Components</a></li>
  <li><a class="Content" href="rules.html#preload">Preload Components</a></li>
  <li><a class="Content" href="rules.html#min_dom">Reduce the Number of DOM Elements</a></li>
  <li><a class="Content" href="rules.html#split">Split Components Across Domains</a></li>
  <li><a class="Content" href="rules.html#iframes">Minimize Number of iframes</a></li>
  <li><a class="Content" href="rules.html#no404">Avoid 404s</a></li>
  <li><a class="Cookie"  href="rules.html#cookie_size">Reduce Cookie Size</a></li>
  <li><a class="Cookie"  href="rules.html#cookie_free">Use Cookie-Free Domains for Components</a></li>
  <li><a class="JavaScript" href="rules.html#dom_access">Minimize DOM Access</a></li>
  <li><a class="JavaScript" href="rules.html#events">Develop Smart Event Handlers</a></li>
  <li><a class="CSS"     href="rules.html#csslink">Choose &lt;link&gt; Over @import</a></li>
  <li><a class="CSS"     href="rules.html#no_filters">Avoid Filters</a></li>
  <li><a class="Images"  href="rules.html#opt_images">Optimize Images</a></li>
  <li><a class="Images"  href="rules.html#opt_sprites">Optimize CSS Sprites</a></li>
  <li><a class="Images"  href="rules.html#no_scale">Do Not Scale Images in HTML</a></li><!--'-->
  <li><a class="Images"  href="rules.html#favicon">Make favicon.ico Small and Cacheable</a></li>
  <li><a class="Mobile"  href="rules.html#under25">Keep Components Under 25 KB</a></li>
  <li><a class="Mobile"  href="rules.html#multipart">Pack Components Into a Multipart Document</a></li>
  <li><a class="Server" href="rules.html#emptysrc">Avoid Empty Image src</a></li>
</ol>


<script type="text/javascript">
var YAHOO = YAHOO || {};
YAHOO.YDNPerf = {
    rules: [],
    populate: function() {
        var lis = document.getElementById('rules-list').getElementsByTagName('li');
        var cnt = lis.length;
        var curr;
        for (var i = 0; i < cnt; i++) {
            curr = lis[i].firstChild;
            this.rules[this.rules.length] = {
                className: curr.className,
                href: curr.href,
                text: curr.firstChild.nodeValue
            };
        }
    },

    filterRules: function (e) {
        if (this.rules.length === 0) {
            this.populate();
        }

        var filter = '';
        if (typeof e === 'string') {
            filter = e;
        } else {
            var target = (e.target) ? e.target : e.srcElement;
            if (target.tagName !== 'LI') return;

            filter= target.innerHTML.replace(/\s/g, '');

            var allowed = {'All': 1, 'Content': 1, 'Server': 1, 'CSS': 1, 'JavaScript': 1, 'Cookie': 1, 'Images': 1, 'Mobile': 1};
            if (!allowed[filter]) {
                return;
            }
        }

        var thelist = document.getElementById('rules-list');
        thelist.innerHTML = '';

        var li, text, href, curr;
        for (var i = 0; i < this.rules.length; i++) {
            curr = this.rules[i];
            if (curr.className.indexOf(filter) === -1 && filter !== 'All') continue;

            text = document.createTextNode(curr.text);
            href = document.createElement('A');
            href.href = curr.href;
            href.className = curr.className;
            li = document.createElement('LI');
            href.appendChild(text);
            li.appendChild(href);
            thelist.appendChild(li);
        }

        lis = document.getElementById('rules-filter').getElementsByTagName('li');
        cnt = lis.length;
        for (i = 0; i < cnt; i++) {
            if (lis[i].innerHTML.replace(/\s/g, '') === filter) {
                lis[i].style.borderColor = 'black';
            } else {
                lis[i].style.borderColor = 'white';
            }
        }

    }

}
YAHOO.YDNPerf.filterRules('content');
</script>
</div>

<h3 id="num_http">Minimize HTTP Requests</h3>

<p class="date">tag: content</p>

<p>80% of the end-user response time is spent on the front-end. Most of this time is tied up in downloading all the components in the page: images, stylesheets, scripts, Flash, etc. Reducing the number of components in turn reduces the number of HTTP requests required to render the page. This is the key to faster pages. </p>

<p>One way to reduce the number of components in the page is to simplify the page's design. But is there a way to build pages with richer content while also achieving fast response times? Here are some techniques for reducing the number of HTTP requests, while still supporting rich page designs.</p>

<p><strong>Combined files</strong> are a way to reduce the number of HTTP requests by combining all scripts into a single script, and similarly combining all CSS into a single stylesheet. Combining files is more challenging when the scripts and stylesheets vary from page to page, but making this part of your release process improves response times.</p>

<p><a href="http://alistapart.com/articles/sprites"><strong>CSS Sprites</strong></a> are the preferred method for reducing the number of image requests. Combine your background images into a single image and use the CSS <code>background-image</code> and <code>background-position</code> properties to display the desired image segment.</p>

<p><a href="http://www.w3.org/TR/html401/struct/objects.html#h-13.6"><strong>Image maps</strong></a> combine multiple images into a single image. The overall size is about the same, but reducing the number of HTTP requests speeds up the page. Image maps only work if the images are contiguous in the page, such as a navigation bar. Defining the coordinates of image maps can be tedious and error prone. Using image maps for navigation is not accessible too, so it's not recommended.</p>

<p><strong>Inline images</strong> use the <a href="http://tools.ietf.org/html/rfc2397"><code>data:</code> URL scheme</a> to embed the image data in the actual page. This can increase the size of your HTML document. Combining inline images into your (cached) stylesheets is a way to reduce HTTP requests and avoid increasing the size of your pages. Inline images are not yet supported across all major browsers.</p>

<p>Reducing the number of HTTP requests in your page is the place to start. This is the most important guideline for improving performance for first time visitors. As described in Tenni Theurer's blog post <a href="http://yuiblog.com/blog/2007/01/04/performance-research-part-2/">Browser Cache Usage - Exposed!</a>, 40-60% of daily visitors to your site come in with an empty cache. Making your page fast for these first time visitors is key to a better user experience.</p>

<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/04/rule_1_make_few.html">discuss this rule</a></p>

<h3 id="cdn">Use a Content Delivery Network</h3>
<p class="date">tag: server</p>

<p>The user's proximity to your web server has an impact on response times. Deploying your content across multiple, geographically dispersed servers will make your pages load faster from the user's perspective. But where should you start?</p>
<p>As a first step to implementing geographically dispersed content, don't attempt to redesign your web application to work in a distributed architecture. Depending on the application, changing the architecture could include daunting tasks such as synchronizing session state and replicating database transactions across server locations. Attempts to reduce the distance between users and your content could be delayed by, or never pass, this application architecture step. </p>
<p>Remember that 80-90% of the end-user response time is spent downloading all the components in the page: images, stylesheets, scripts, Flash, etc. This is the <em>Performance Golden Rule</em>. Rather than starting with the difficult task of redesigning your application architecture, it's better to first disperse your static content. This not only achieves a bigger reduction in response times, but it's easier thanks to content delivery networks.</p>
<p>A content delivery network (CDN) is a collection of web servers distributed across multiple locations to deliver content more efficiently to users. The server selected for delivering content to a specific user is typically based on a measure of network proximity. For example, the server with the fewest network hops or the server with the quickest response time is chosen.</p>
<p>Some large Internet companies own their own CDN, but it's cost-effective to use a CDN service provider, such as <a href="http://www.akamai.com/">Akamai Technologies</a>, <a href="http://www.edgecast.com/">EdgeCast</a>, or <a href="http://www.level3.com/index.cfm?pageID=36">level3</a>. For start-up companies and private web sites, the cost of a CDN service can be prohibitive, but as your target audience grows larger and becomes more global, a CDN is necessary to achieve fast response times. At Yahoo!, properties that moved static content off their application web servers to a CDN (both 3rd party as mentioned above as well as Yahoo’s own <a href="https://cwiki.apache.org/TS/traffic-server.html">CDN</a>) improved end-user response times by 20% or more. Switching to a CDN is a relatively easy code change that will dramatically improve the speed of your web site.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/04/high_performanc_1.html">discuss this rule</a></p>

<h3 id="expires">Add an Expires or a Cache-Control Header</h3>

<p class="date">tag: server</p>

<p>There are two aspects to this rule:</p>
<ul>
    <li class="bullist">For static components: implement "Never expire" policy by setting far future <code>Expires</code> header</li>
    <li class="bullist">For dynamic components: use an appropriate <code>Cache-Control</code> header to help the browser with conditional requests</li>
</ul>
<br />
<p>Web page designs are getting richer and richer, which means more scripts, stylesheets, images, and Flash in the page. A first-time visitor to your page may have to make several HTTP requests, but by using the Expires header you make those components cacheable. This avoids unnecessary HTTP requests on subsequent page views. Expires headers are most often used with images, but they should be used on <em>all</em> components including scripts, stylesheets, and Flash components.</p>
<p>Browsers (and proxies) use a cache to reduce the number and size of HTTP requests, making web pages load faster. A web server uses the Expires header in the HTTP response to tell the client how long a component can be cached. This is a far future Expires header, telling the browser that this response won't be stale until April 15, 2010. </p>
<pre>      Expires: Thu, 15 Apr 2010 20:00:00 GMT</pre><br />
<p>If your server is Apache, use the ExpiresDefault directive to set an expiration date relative to the current date. This example of the ExpiresDefault directive sets the Expires date 10 years out from the time of the request.</p>
<pre>      ExpiresDefault "access plus 10 years"</pre><br />
<p>Keep in mind, if you use a far future Expires header you have to change the component's filename whenever the component changes. At Yahoo! we often make this step part of the build process: a version number is embedded in the component's filename, for example, yahoo_2.0.6.js.</p>
<p>Using a far future Expires header affects page views only after a user has already visited your site. It has no effect on the number of HTTP requests when a user visits your site for the first time and the browser's cache is empty. Therefore the impact of this performance improvement depends on how often users hit your pages with a primed cache. (A "primed cache" already contains all of the components in the page.) We <a href="http://yuiblog.com/blog/2007/01/04/performance-research-part-2/">measured this at Yahoo!</a> and found the number of page views with a primed cache is 75-85%. By using a far future Expires header, you increase the number of components that are cached by the browser and re-used on subsequent page views without sending a single byte over the user's Internet connection.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/05/high_performanc_2.html">discuss this rule</a></p>

<h3 id="gzip">Gzip Components</h3>

<p class="date">tag: server</p>

<p>The time it takes to transfer an HTTP request and response across the network can be significantly reduced by decisions made by front-end engineers. It's true that the end-user's bandwidth speed, Internet service provider, proximity to peering exchange points, etc. are beyond the control of the development team. But there are other variables that affect response times. Compression reduces response times by reducing the size of the HTTP response.</p>
<p>Starting with HTTP/1.1, web clients indicate support for compression with the Accept-Encoding header in the HTTP request.</p>
<pre>      Accept-Encoding: gzip, deflate</pre><br />
<p>If the web server sees this header in the request, it may compress the response using one of the methods listed by the client. The web server notifies the web client of this via the Content-Encoding header in the response.</p>
<pre>      Content-Encoding: gzip</pre><br />
<p>Gzip is the most popular and effective compression method at this time. It was developed by the GNU project and standardized by <a href="http://www.ietf.org/rfc/rfc1952.txt">RFC 1952</a>. The only other compression format you're likely to see is deflate, but it's less effective and less popular. </p>
<p>Gzipping generally reduces the response size by about 70%. Approximately 90% of today's Internet traffic travels through browsers that claim to support gzip. If you use Apache, the module configuring gzip depends on your version: Apache 1.3 uses <a href="http://sourceforge.net/projects/mod-gzip/">mod_gzip</a> while Apache 2.x uses <a href="http://httpd.apache.org/docs/2.0/mod/mod_deflate.html">mod_deflate</a>. </p>
<p>There are known issues with browsers and proxies that may cause a mismatch in what the browser expects and what it receives with regard to compressed content. Fortunately, these edge cases are dwindling as the use of older browsers drops off. The Apache modules help out by adding appropriate Vary response headers automatically. </p>
<p>Servers choose what to gzip based on file type, but are typically too limited in what they decide to compress. Most web sites gzip their HTML documents. It's also worthwhile to gzip your scripts and stylesheets, but many web sites miss this opportunity. In fact, it's worthwhile to compress any text response including XML and JSON. Image and PDF files should not be gzipped because they are already compressed. Trying to gzip them not only wastes CPU but can potentially increase file sizes. </p>
<p>Gzipping as many file types as possible is an easy way to reduce page weight and accelerate the user experience.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_3.html">discuss this rule</a></p>

<h3 id="css_top">Put Stylesheets at the Top</h3>

<p class="date">tag: css</p>

<p>While researching performance at Yahoo!, we discovered that moving stylesheets to the document HEAD makes pages <em>appear</em> to be loading faster. This is because putting stylesheets in the HEAD allows the page to render progressively. </p>
<p>Front-end engineers that care about performance want a page to load progressively; that is, we want the browser to display whatever content it has as soon as possible. This is especially important for pages with a lot of content and for users on slower Internet connections. The importance of giving users visual feedback, such as progress indicators, has been well researched and <a href="http://www.useit.com/papers/responsetime.html">documented</a>. In our case the HTML page is the progress indicator! When the browser loads the page progressively the header, the navigation bar, the logo at the top, etc. all serve as visual feedback for the user who is waiting for the page. This improves the overall user experience.</p>
<p>The problem with putting stylesheets near the bottom of the document is that it prohibits progressive rendering in many browsers, including Internet Explorer. These browsers block rendering to avoid having to redraw elements of the page if their styles change. The user is stuck viewing a blank white page.
<p>The <a href="http://www.w3.org/TR/html4/struct/links.html#h-12.3">HTML specification</a> clearly states that stylesheets are to be included in the HEAD of the page: "Unlike A, [LINK] may only appear in the HEAD section of a document, although it may appear any number of times." Neither of the alternatives, the blank white screen or flash of unstyled content, are worth the risk. The optimal solution is to follow the HTML specification and load your stylesheets in the document HEAD.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_4.html">discuss this rule</a></p>

<h3 id="js_bottom">Put Scripts at the Bottom</h3>

<p class="date">tag: javascript</p>

<p>The problem caused by scripts is that they block parallel downloads. The <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec8.html#sec8.1.4">HTTP/1.1 specification</a> suggests that browsers download no more than two components in parallel per hostname. If you serve your images from multiple hostnames, you can get more than two downloads to occur in parallel. While a script is downloading, however, the browser won't start any other downloads, even on different hostnames. </p>
<p>In some situations it's not easy to move scripts to the bottom. If, for example, the script uses <code>document.write</code> to insert part of the page's content, it can't be moved lower in the page. There might also be scoping issues. In many cases, there are ways to workaround these situations.</p>
<p>An alternative suggestion that often comes up is to use deferred scripts. The <code>DEFER</code> attribute indicates that the script does not contain document.write, and is a clue to browsers that they can continue rendering. Unfortunately, Firefox doesn't support the <code>DEFER</code> attribute. In Internet Explorer, the script may be deferred, but not as much as desired. If a script can be deferred, it can also be moved to the bottom of the page. That will make your web pages load faster.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_5.html">discuss this rule</a></p>

<h3 id="css_expressions">Avoid CSS Expressions</h3>

<p class="date">tag: css</p>

<p>CSS expressions are a powerful (and dangerous) way to set CSS properties dynamically. They were supported in Internet Explorer starting with version 5, but were <a href="http://msdn.microsoft.com/en-us/library/ms537634%28VS.85%29.aspx">deprecated starting with IE8</a>. As an example, the background color could be set to alternate every hour using CSS expressions:</p>
<pre>      background-color: expression( (new Date()).getHours()%2 ? "#B8D4FF" : "#F08A00" );</pre><br />

<p>As shown here, the <code>expression</code> method accepts a JavaScript expression. The CSS property is set to the result of evaluating the JavaScript expression. The <code>expression</code> method is ignored by other browsers, so it is useful for setting properties in Internet Explorer needed to create a consistent experience across browsers.</p>
<p>The problem with expressions is that they are evaluated more frequently than most people expect. Not only are they evaluated when the page is rendered and resized, but also when the page is scrolled and even when the user moves the mouse over the page. Adding a counter to the CSS expression allows us to keep track of when and how often a CSS expression is evaluated. Moving the mouse around the page can easily generate more than 10,000 evaluations.</p>
<p>One way to reduce the number of times your CSS expression is evaluated is to use one-time expressions, where the first time the expression is evaluated it sets the style property to an explicit value, which replaces the CSS expression. If the style property must be set dynamically throughout the life of the page, using event handlers instead of CSS expressions is an alternative approach. If you must use CSS expressions, remember that they may be evaluated thousands of times and could affect the performance of your page.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_6.html">discuss this rule</a></p>

<h3 id="external">Make JavaScript and CSS External</h3>

<p class="date">tag: javascript, css</p>

<p>Many of these performance rules deal with how external components are managed. However, before these considerations arise you should ask a more basic question: Should JavaScript and CSS be contained in external files, or inlined in the page itself?</p>

<p>Using external files in the real world generally produces faster pages because the JavaScript and CSS files are cached by the browser. JavaScript and CSS that are inlined in HTML documents get downloaded every time the HTML document is requested. This reduces the number of HTTP requests that are needed, but increases the size of the HTML document. On the other hand, if the JavaScript and CSS are in external files cached by the browser, the size of the HTML document is reduced without increasing the number of HTTP requests. </p>

<p>The key factor, then, is the frequency with which external JavaScript and CSS components are cached relative to the number of HTML documents requested. This factor, although difficult to quantify, can be gauged using various metrics. If users on your site have multiple page views per session and many of your pages re-use the same scripts and stylesheets, there is a greater potential benefit from cached external files. </p>

<p>Many web sites fall in the middle of these metrics. For these sites, the best solution generally is to deploy the JavaScript and CSS as external files. The only exception where inlining is preferable is with home pages, such as <a href="http://www.yahoo.com">Yahoo!'s front page</a> and <a href="http://my.yahoo.com">My Yahoo!</a>.
Home pages that have few (perhaps only one) page view per session may find that inlining JavaScript and CSS results in faster end-user response times.</p>

<p>For front pages that are typically the first of many page views, there are techniques that leverage the reduction of HTTP requests that inlining provides, as well as the caching benefits achieved through using external files. One such technique is to inline JavaScript and CSS in the front page, but dynamically download the external files after the page has finished loading. Subsequent pages would reference the external files that should already be in the browser's cache.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/rule_8_make_jav.html">discuss this rule</a></p>


<h3 id="dns_lookups">Reduce DNS Lookups</h3>

<p class="date">tag: content</p>

<p>The Domain Name System (DNS) maps hostnames to IP addresses, just as phonebooks map people's names to their phone numbers. When you type www.yahoo.com into your browser, a DNS resolver contacted by the browser returns that server's IP address. DNS has a cost. It typically takes 20-120 milliseconds for DNS to lookup the IP address for a given hostname. The browser can't download anything from this hostname until the DNS lookup is completed. </p>
<p>DNS lookups are cached for better performance. This caching can occur on a special caching server, maintained by the user's ISP or local area network, but there is also caching that occurs on the individual user's computer. The DNS information remains in the operating system's DNS cache (the "DNS Client service" on Microsoft Windows). Most browsers have their own caches, separate from the operating system's cache. As long as the browser keeps a DNS record in its own cache, it doesn't bother the operating system with a request for the record.</p>
<p>Internet Explorer caches DNS lookups for 30 minutes by default, as specified by the  <code>DnsCacheTimeout</code> registry setting. Firefox caches DNS lookups for 1 minute, controlled by the <code>network.dnsCacheExpiration</code> configuration setting. (Fasterfox changes this to 1 hour.)</p>
<p>When the client's DNS cache is empty (for both the browser and the operating system), the number of DNS lookups is equal to the number of unique hostnames in the web page. This includes the hostnames used in the page's URL, images, script files, stylesheets, Flash objects, etc. Reducing the number of unique hostnames reduces the number of DNS lookups. </p>
<p>Reducing the number of unique hostnames has the potential to reduce the amount of parallel downloading that takes place in the page. Avoiding DNS lookups cuts response times, but reducing parallel downloads may increase response times. My guideline is to split these components across at least two but no more than four hostnames. This results in a good compromise between reducing DNS lookups and allowing a high degree of parallel downloads.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_7.html">discuss this rule</a></p>


<h3 id="minify">Minify JavaScript and CSS</h3>

<p class="date">tag: javascript, css</p>

<p>Minification is the practice of removing unnecessary characters from code to reduce its size thereby improving load times. When code is minified all comments are removed, as well as unneeded white space characters (space, newline, and tab). In the case of JavaScript, this improves response time performance because the size of the downloaded file is reduced. Two popular tools for minifying JavaScript code are <a href="http://crockford.com/javascript/jsmin">JSMin</a> and <a href="http://developer.yahoo.com/yui/compressor/">YUI Compressor</a>. The YUI compressor can also minify CSS.</p>
<p>Obfuscation is an alternative optimization that can be applied to source code. It's more complex than minification and thus more likely to generate bugs as a result of the obfuscation step itself. In a survey of ten top U.S. web sites, minification achieved a 21% size reduction versus 25% for obfuscation. Although obfuscation has a higher size reduction, minifying JavaScript is less risky.</p>

<p>In addition to minifying external scripts and styles, inlined <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> blocks can and should also be minified. Even if you gzip your scripts and styles, minifying them will still reduce the size by 5% or more. As the use and size of JavaScript and CSS increases, so will the savings gained by minifying your code.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_8.html">discuss this rule</a></p>


<h3 id="redirects">Avoid Redirects</h3>

<p class="date">tag: content</p>

<p>Redirects are accomplished using the 301 and 302 status codes. Here's an example of the HTTP headers in a 301 response:</p>
<pre>      HTTP/1.1 301 Moved Permanently
      Location: http://example.com/newuri
      Content-Type: text/html</pre><br />
<p>The browser automatically takes the user to the URL specified in the <code>Location</code> field. All the information necessary for a redirect is in the headers. The body of the response is typically empty. Despite their names, neither a 301 nor a 302 response is cached in practice unless additional headers, such as <code>Expires</code> or <code>Cache-Control</code>, indicate it should be. The meta refresh tag and JavaScript are other ways to direct users to a different URL, but if you must do a redirect, the preferred technique is to use the standard 3xx HTTP status codes, primarily to ensure the back button works correctly.</p>
<p>The main thing to remember is that redirects slow down the user experience. Inserting a redirect between the user and the HTML document delays everything in the page since nothing in the page can be rendered and no components can start being downloaded until the HTML document has arrived.</p>
<p>One of the most wasteful redirects happens frequently and web developers are generally not aware of it. It occurs when a trailing slash (/) is missing from a URL that should otherwise have one. For example, going to <a href="http://astrology.yahoo.com/astrology">http://astrology.yahoo.com/astrology</a> results in a 301 response containing a redirect to <a href="http://astrology.yahoo.com/astrology/">http://astrology.yahoo.com/astrology/</a> (notice the added trailing slash). This is fixed in Apache by using <code>Alias</code> or <code>mod_rewrite</code>, or the <code>DirectorySlash</code> directive if you're using Apache handlers.</p>
<p>Connecting an old web site to a new one is another common use for redirects. Others include connecting different parts of a website and directing the user based on certain conditions (type of browser, type of user account, etc.). Using a redirect to connect two web sites is simple and requires little additional coding. Although using redirects in these situations reduces the complexity for developers, it degrades the user experience. Alternatives for this use of redirects include using <code>Alias</code> and <code>mod_rewrite</code> if the two code paths are hosted on the same server. If a domain name change is the cause of using redirects, an alternative is to create a CNAME (a DNS record that creates an alias pointing from one domain name to another) in combination with <code>Alias</code> or <code>mod_rewrite</code>.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_9.html">discuss this rule</a></p>


<h3 id="js_dupes">Remove Duplicate Scripts</h3>

<p class="date">tag: javascript</p>

<p>It hurts performance to include the same JavaScript file twice in one page. This isn't as unusual as you might think. A review of the ten top U.S. web sites shows that two of them contain a duplicated script. Two main factors increase the odds of a script being duplicated in a single web page: team size and number of scripts. When it does happen, duplicate scripts hurt performance by creating unnecessary HTTP requests and wasted JavaScript execution.</p>
<p>Unnecessary HTTP requests happen in Internet Explorer, but not in Firefox. In Internet Explorer, if an external script is included twice and is not cacheable, it generates two HTTP requests during page loading. Even if the script is cacheable, extra HTTP requests occur when the user reloads the page.</p>
<p>In addition to generating wasteful HTTP requests, time is wasted evaluating the script multiple times. This redundant JavaScript execution happens in both Firefox and Internet Explorer, regardless of whether the script is cacheable.</p>
<p>One way to avoid accidentally including the same script twice is to implement a script management module in your templating system. The typical way to include a script is to use the SCRIPT tag in your HTML page.</p>
<pre>      &lt;script type="text/javascript" src="menu_1.0.17.js"&gt;&lt;/script&gt;</pre><br />
<p>An alternative in PHP would be to create a function called <code>insertScript</code>.</p>
<pre>      &lt;?php insertScript("menu.js") ?&gt;</pre><br />
<p>In addition to preventing the same script from being inserted multiple times, this function could handle other issues with scripts, such as dependency checking and adding version numbers to script filenames to support far future Expires headers.</p>
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_10.html">discuss this rule</a></p>


<h3 id="etags">Configure ETags</h3>

<p class="date">tag: server</p>

<p>Entity tags (ETags) are a mechanism that web servers and browsers use to determine whether the component in the browser's cache matches the one on the origin server. (An "entity" is another word a "component": images, scripts, stylesheets, etc.) ETags were added to provide a mechanism for validating entities that is more flexible than the last-modified date. An ETag is a string that uniquely identifies a specific version of a component. The only format constraints are that the string be quoted. The origin server specifies the component's ETag using the <code>ETag</code> response header.</p>
<pre>      HTTP/1.1 200 OK
      Last-Modified: Tue, 12 Dec 2006 03:03:59 GMT
      ETag: "10c24bc-4ab-457e1c1f"
      Content-Length: 12195</pre><br />
<p>Later, if the browser has to validate a component, it uses the <code>If-None-Match</code> header to pass the ETag back to the origin server. If the ETags match, a 304 status code is returned reducing the response by 12195 bytes for this example.
<pre>      GET /i/yahoo.gif HTTP/1.1
      Host: us.yimg.com
      If-Modified-Since: Tue, 12 Dec 2006 03:03:59 GMT
      If-None-Match: "10c24bc-4ab-457e1c1f"
      HTTP/1.1 304 Not Modified</pre><br />
<p>The problem with ETags is that they typically are constructed using attributes that make them unique to a specific server hosting a site. ETags won't match when a browser gets the original component from one server and later tries to validate that component on a different server, a situation that is all too common on Web sites that use a cluster of servers to handle requests. By default, both Apache and IIS embed data in the ETag that dramatically reduces the odds of the validity test succeeding on web sites with multiple servers.
<p>The ETag format for Apache 1.3 and 2.x is <code>inode-size-timestamp</code>. Although a given file may reside in the same directory across multiple servers, and have the same file size, permissions, timestamp, etc., its inode is different from one server to the next.
<p>IIS 5.0 and 6.0 have a similar issue with ETags. The format for ETags on IIS is <code>Filetimestamp:ChangeNumber</code>. A <code>ChangeNumber</code> is a counter used to track configuration changes to IIS. It's unlikely that the <code>ChangeNumber</code> is the same across all IIS servers behind a web site.
<p>The end result is ETags generated by Apache and IIS for the exact same component won't match from one server to another. If the ETags don't match, the user doesn't receive the small, fast 304 response that ETags were designed for; instead, they'll get a normal 200 response along with all the data for the component. If you host your web site on just one server, this isn't a problem. But if you have multiple servers hosting your web site, and you're using Apache or IIS with the default ETag configuration, your users are getting slower pages, your servers have a higher load, you're consuming greater bandwidth, and proxies aren't caching your content efficiently. Even if your components have a far future <code>Expires</code> header, a conditional GET request is still made whenever the user hits Reload or Refresh.
<p>If you're not taking advantage of the flexible validation model that ETags provide, it's better to just remove the ETag altogether. The <code>Last-Modified</code> header validates based on the component's timestamp. And removing the ETag reduces the size of the HTTP headers in both the response and subsequent requests. This <a href="http://support.microsoft.com/?id=922733">Microsoft Support article</a> describes how to remove ETags. In Apache, this is done by simply adding the following line to your Apache configuration file:
<pre>      FileETag none</pre><br />
<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/07/high_performanc_11.html">discuss this rule</a></p>



<h3 id="cacheajax">Make Ajax Cacheable</h3>

<p class="date">tag: content</p>

<p>One of the cited benefits of Ajax is that it provides instantaneous feedback to the user because it requests information asynchronously from the backend web server. However, using Ajax is no guarantee that the user won't be twiddling his thumbs waiting for those asynchronous JavaScript and XML responses to return. In many applications, whether or not the user is kept waiting depends on how Ajax is used. For example, in a web-based email client the user will be kept waiting for the results of an Ajax request to find all the email messages that match their search criteria. It's important to remember that "asynchronous" does not imply "instantaneous".</p>

<p>To improve performance, it's important to optimize these Ajax responses. The most important way to improve the performance of Ajax is to make the responses cacheable, as discussed in <a href="#expires">Add an Expires or a Cache-Control Header</a>. Some of the other rules also apply to Ajax:<br />

<ul>
  <li class="bullist"> <a href="#gzip">Gzip Components</a><br />
  <li class="bullist"> <a href="#dns_lookups">Reduce DNS Lookups</a><br />
  <li class="bullist"> <a href="#minify">Minify JavaScript</a><br />
  <li class="bullist"> <a href="#redirects">Avoid Redirects</a><br />
  <li class="bullist"> <a href="#etags">Configure ETags</a><br />
</ul></p>
<br />
<p>Let's look at an example. A Web 2.0 email client might use Ajax to download the user's address book for autocompletion. If the user hasn't modified her address book since the last time she used the email web app, the previous address book response could be read from cache if that Ajax response was made cacheable with a future Expires or Cache-Control header. The browser must be informed when to use a previously cached address book response versus requesting a new one. This could be done by adding a timestamp to the address book Ajax URL indicating the last time the user modified her address book, for example, <code>&amp;t=1190241612</code>. If the address book hasn't been modified since the last download, the timestamp will be the same and the address book will be read from the browser's cache eliminating an extra HTTP roundtrip. If the user has modified her address book, the timestamp ensures the new URL doesn't match the cached response, and the browser will request the updated address book entries.</p>

<p>Even though your Ajax responses are created dynamically, and might only be applicable to a single user, they can still be cached. Doing so will make your Web 2.0 apps faster.</p>

<p><a href="#page-nav">top</a> | <a href="http://developer.yahoo.net/blog/archives/2007/09/high_performanc_12.html">discuss this rule</a></p>


<h3 id="flush">Flush the Buffer Early</h3>

<p class="date">tag: server</p>

<p>
 When users request a page, it can take anywhere from 200 to 500ms for the backend server to stitch together the HTML page.
 During this time, the browser is idle as it waits for the data to arrive.
 In PHP you have the function <a href="http://php.net/flush">flush()</a>.
 It allows you to send your partially ready HTML response to the browser so that
 the browser can start fetching components while your backend is busy with the rest of the HTML page.
 The benefit is mainly seen on busy backends or light frontends.
</p>

<p>
    A good place to consider flushing is right after the HEAD because the HTML for the head is
    usually easier to produce and it allows you to include any CSS and JavaScript
    files for the browser to start fetching in parallel while the backend is still processing.

<p>Example:</p>
<pre>
      ... &lt;!-- css, js --&gt;
    &lt;/head&gt;
    <span class="hilite">&lt;?php flush(); ?&gt;</span>
    &lt;body&gt;
      ... &lt;!-- content --&gt;
</pre>
<br />

<p><a href="http://search.yahoo.com">Yahoo! search</a> pioneered research and real user testing to prove the benefits of using this technique.</p>

<p><a href="#page-nav">top</a></p>


<h3 id="ajax_get">Use GET for AJAX Requests</h3>

<p class="date">tag: server</p>

<p>
    The <a href="http://mail.yahoo.com">Yahoo! Mail</a> team found that when using <code>XMLHttpRequest</code>, POST is implemented in the browsers as a two-step process:
    sending the headers first, then sending data. So it's best to use GET, which only takes one TCP packet to send (unless you have a lot of cookies).
    The maximum URL length in IE is 2K, so if you send more than 2K data you might not be able to use GET.
</p>
<p>An interesting side affect is that POST without actually posting any data behaves like GET.
Based on the <a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec9.html">HTTP specs</a>, GET is meant for retrieving information, so it
        makes sense (semantically) to use GET when you're only requesting data, as opposed to sending data to be stored server-side.
</p>


</p>
<p><a href="#page-nav">top</a></p>


<h3 id="postload">Post-load Components</h3>

<p class="date">tag: content</p>

<p>
    You can take a closer look at your page and ask yourself: "What's absolutely required in order to render the page initially?".
    The rest of the content and components can wait.
</p>
<p>
    JavaScript is an ideal candidate for splitting before and after the onload event. For example
    if you have JavaScript code and libraries that do drag and drop and animations, those can wait,
    because dragging elements on the page comes after the initial rendering.
    Other places to look for candidates for post-loading include hidden content (content that appears after a user action) and images below the fold.
</p>
<p>
    Tools to help you out in your effort: <a href="http://developer.yahoo.com/yui/imageloader/">YUI Image Loader</a> allows you to delay images
    below the fold and the <a href="http://developer.yahoo.com/yui/get/">YUI Get utility</a> is an easy way to include JS and CSS on the fly.
    For an example in the wild take a look at <a href="http://www.yahoo.com">Yahoo! Home Page</a> with Firebug's Net Panel turned on.
</p>
<p>
    It's good when the performance goals are inline with other
    web development best practices. In this case, the idea of progressive enhancement tells us that JavaScript, when supported, can
    improve the user experience but you have to make sure the page works even without JavaScript. So after you've made sure the page
    works fine, you can enhance it with some post-loaded scripts that give you more bells and whistles such as drag and drop and animations.
</p>
<p><a href="#page-nav">top</a></p>


<h3 id="preload">Preload Components</h3>

<p class="date">tag: content</p>

<p>
    Preload may look like the opposite of post-load, but it actually has a different goal.
    By preloading components you can take advantage of the time the browser is idle and request components
    (like images, styles and scripts) you'll need in the future.
    This way when the user visits the next page, you could have most of the components already in
    the cache and your page will load much faster for the user.
</p>
<p>
    There are actually several types of preloading:
</p>
<ul>
    <li class="bullist"><em>Unconditional</em> preload - as soon as onload fires, you go ahead and fetch some extra components.
        Check google.com for an example of how a sprite image is requested onload. This sprite image is
        not needed on the google.com homepage, but it is needed on the consecutive search result page.</li>
    <li class="bullist"><em>Conditional</em> preload - based on a user action you make an educated guess where the user is headed next and preload accordingly.
        On <a href="http://search.yahoo.com">search.yahoo.com</a> you can see how some extra components are requested
        after you start typing in the input box.</li>
    <li class="bullist"><em>Anticipated</em> preload - preload in advance before launching a redesign. It often happens after a redesign that you hear:
        "The new site is cool, but it's slower than before". Part of the problem could be that the users were visiting your old site with a
        full cache, but the new one is always an empty cache experience. You can mitigate this side effect by preloading some
        components before you even launched the redesign. Your old site can use the time the browser is idle and request images and scripts
        that will be used by the new site</li>
</ul>


<p><a href="#page-nav">top</a></p>


<h3 id="min_dom">Reduce the Number of DOM Elements</h3>

<p class="date">tag: content</p>

<p>
    A complex page means more bytes to download and it also means slower DOM access in JavaScript. It makes a difference
    if you loop through 500 or 5000 DOM elements on the page when you want to add an event handler for example.
</p>
<p>
    A high number of DOM elements can be a symptom that there's something that should be improved with the markup
    of the page without necessarily removing content.
    Are you using nested tables for layout purposes?
    Are you throwing in more <code>&lt;div&gt;</code>s only to fix layout issues?
    Maybe there's a better and more semantically correct way to do your markup.
</p>
<p>
    A great help with layouts are the <a href="http://developer.yahoo.com/yui/">YUI CSS utilities</a>:
    grids.css can help you with the overall layout, fonts.css and reset.css
    can help you strip away the browser's defaults formatting.
    This is a chance to start fresh and think about your markup,
    for example use <code>&lt;div&gt;</code>s only when it makes sense semantically, and not because it renders a new line.

</p>
<p>
    The number of DOM elements is easy to test, just type in Firebug's console:<br />
        <code>document.getElementsByTagName('*').length</code>
</p>
<p>
    And how many DOM elements are too many? Check other similar pages that have good markup.
    For example the <a href="http://www.yahoo.com">Yahoo! Home Page</a> is a pretty busy page and still under 700 elements (HTML tags).
</p>

<p><a href="#page-nav">top</a></p>


<h3 id="split">Split Components Across Domains</h3>

<p class="date">tag: content</p>

<p>
    Splitting components allows you to maximize parallel downloads. Make sure you're using
    not more than 2-4 domains because of the DNS lookup penalty.
    For example, you can host your HTML and dynamic content
    on <code>www.example.org</code>
    and split static components between <code>static1.example.org</code> and <code>static2.example.org</code>
</p>
<p>
    For more information check
    "<a href="http://yuiblog.com/blog/2007/04/11/performance-research-part-4/">Maximizing Parallel Downloads in the Carpool Lane</a>" by Tenni Theurer and Patty Chi.

</p>
<p><a href="#page-nav">top</a></p>


<h3 id="iframes">Minimize the Number of iframes</h3>

<p class="date">tag: content</p>

<p>
    Iframes allow an HTML document to be inserted in the parent document.
    It's important to understand how iframes work so they can be used effectively.
</p>
<p>
    <code>&lt;iframe&gt;</code> pros:
</p>
    <ul>
      <li class="bullist">Helps with slow third-party content like badges and ads</li>
      <li class="bullist">Security sandbox</li>
      <li class="bullist">Download scripts in parallel</li>
    </ul>
<p>
    <code>&lt;iframe&gt;</code> cons:
</p>
    <ul>
      <li class="bullist">Costly even if blank</li>
      <li class="bullist">Blocks page onload</li>
      <li class="bullist">Non-semantic</li>
    </ul>

<p><a href="#page-nav">top</a></p>


<h3 id="no404">No 404s</h3>

<p class="date">tag: content</p>

<p>
    HTTP requests are expensive so making an HTTP request and getting a useless response (i.e. 404 Not Found)
    is totally unnecessary and will slow down the user experience without any benefit.
</p>

<p>
    Some sites have helpful 404s "Did you mean X?", which is great for the user
    experience but also wastes server resources (like database, etc).
    Particularly bad is when the link to an external JavaScript is wrong and the result is a 404.
    First, this download will block parallel downloads. Next the browser may try to parse
    the 404 response body as if it were JavaScript code, trying to find something usable in it.
</p>


<p><a href="#page-nav">top</a></p>


<h3 id="cookie_size">Reduce Cookie Size</h3>

<p class="date">tag: cookie</p>

<p>
    HTTP cookies are used for a variety of reasons such as authentication and personalization.
    Information about cookies is exchanged in the HTTP headers between web servers and browsers.
    It's important to keep the size of cookies as low as possible to minimize the impact on the user's response time.
</p>


<p>
    For more information check
    <a href="http://yuiblog.com/blog/2007/03/01/performance-research-part-3/">"When the Cookie Crumbles"</a> by Tenni Theurer and Patty Chi.
    The take-home of this research:
<p>
<ul>
    <li class="bullist">Eliminate unnecessary cookies</li>
    <li class="bullist">Keep cookie sizes as low as possible to minimize the impact on the user response time</li>
    <li class="bullist">Be mindful of setting cookies at the appropriate domain level so other sub-domains are not affected</li>
    <li class="bullist">Set an Expires date appropriately. An earlier Expires date or none removes the cookie sooner, improving the user response time</li>
</ul>

<p><a href="#page-nav">top</a></p>


<h3 id="cookie_free">Use Cookie-free Domains for Components</h3>

<p class="date">tag: cookie</p>

<p>
    When the browser makes a request for a static image and sends cookies together with the request,
    the server doesn't have any use for those cookies. So they only create network traffic for no good
    reason. You should make sure static components are requested with cookie-free requests. Create
    a subdomain and host all your static components there.
</p>
<p>
    If your domain is <code>www.example.org</code>, you can host your static components
    on <code>static.example.org</code>. However, if you've already set cookies on the top-level domain
    <code>example.org</code> as opposed to <code>www.example.org</code>, then all the requests to
    <code>static.example.org</code> will include those cookies. In this case, you can buy a whole new domain, host your static
    components there, and keep this domain cookie-free. Yahoo! uses <code>yimg.com</code>, YouTube uses <code>ytimg.com</code>,
    Amazon uses <code>images-amazon.com</code> and so on.
</p>
<p>
    Another benefit of hosting static components on a cookie-free domain is that some proxies might refuse to cache
    the components that are requested with cookies.
    On a related note, if you wonder if you should use example.org or www.example.org for your home page, consider the cookie impact.
    Omitting www leaves you no choice but to write cookies to <code>*.example.org</code>, so for performance reasons it's best to use the
    www subdomain and
    write the cookies to that subdomain.
</p>
<p><a href="#page-nav">top</a></p>


<h3 id="dom_access">Minimize DOM Access</h3>

<p class="date">tag: javascript</p>

<p>
    Accessing DOM elements with JavaScript is slow so in order to have a more responsive page, you should:
</p>
<ul>
    <li class="bullist">Cache references to accessed elements</li>
    <li class="bullist">Update nodes "offline" and then add them to the tree</li>
    <li class="bullist">Avoid fixing layout with JavaScript</li>
</ul>
<p>
    For more information check the YUI theatre's
    <a href="http://yuiblog.com/blog/2007/12/20/video-lecomte/">"High Performance Ajax Applications"</a>
    by Julien Lecomte.
</p>

<p><a href="#page-nav">top</a></p>


<h3 id="events">Develop Smart Event Handlers</h3>

<p class="date">tag: javascript</p>

<p>
    Sometimes pages feel less responsive because of too many event handlers attached to different
    elements of the DOM tree which are then executed too often. That's why using <em>event delegation</em> is a good approach.
    If you have 10 buttons inside a <code>div</code>, attach only one event handler to the div wrapper, instead of
    one handler for each button. Events bubble up so you'll be able to catch the event and figure out which button it originated from.
</p>
<p>
    You also don't need to wait for the onload event in order to start doing something with the DOM tree.
    Often all you need is the element you want to access to be available in the tree. You don't have to wait for all images to be downloaded.

    <code>DOMContentLoaded</code> is the event you might consider using instead of onload, but until it's available in all browsers, you
    can use the <a href="http://developer.yahoo.com/yui/event/">YUI Event</a> utility, which has an <code><a href="http://developer.yahoo.com/yui/event/#onavailable">onAvailable</a></code> method.
</p>

<p>
    For more information check the YUI theatre's
    <a href="http://yuiblog.com/blog/2007/12/20/video-lecomte/">"High Performance Ajax Applications"</a>
    by Julien Lecomte.
</p>


<p><a href="#page-nav">top</a></p>


<h3 id="csslink">Choose &lt;link&gt; over @import</h3>

<p class="date">tag: css</p>

<p>
    One of the previous best practices states that CSS should be at the top in order to allow for
    progressive rendering.
</p>
<p>
    In IE <code>@import</code> behaves the same as using <code>&lt;link&gt;</code> at the bottom of the page, so it's best not to use it.
</p>

<p><a href="#page-nav">top</a></p>


<h3 id="no_filters">Avoid Filters</h3>

<p class="date">tag: css</p>

<p>
    The IE-proprietary <code>AlphaImageLoader</code> filter aims to fix a problem with semi-transparent true color PNGs in IE versions &lt; 7.
    The problem with this filter is that it blocks rendering and freezes the browser while the image is being downloaded.
    It also increases memory consumption and is applied per element, not per image, so the problem is multiplied.
</p>
<p>
    The best approach is to avoid <code>AlphaImageLoader</code> completely and use gracefully degrading PNG8 instead, which are fine in IE.
    If you absolutely need <code>AlphaImageLoader</code>, use the underscore hack <code>_filter</code> as to not penalize your IE7+ users.
</p>
<p><a href="#page-nav">top</a></p>


<h3 id="opt_images">Optimize Images</h3>

<p class="date">tag: images</p>

<p>
    After a designer is done with creating the images for your web page, there are still some things you can try before you
    FTP those images to your web server.
</p>
<ul>
    <li class="bullist">You can check the GIFs and see if they are using a palette size corresponding
        to the number of colors in the image. Using <a href="http://www.imagemagick.org">imagemagick</a> it's easy to check using
        <br />
        <code>identify -verbose image.gif</code>
        <br />
        When you see an image using 4 colors and a 256 color "slots" in the palette, there is room for improvement.
    </li>
    <li class="bullist">
        Try converting GIFs to PNGs and see if there is a saving. More often than not, there is.
        Developers often hesitate to use PNGs due to the limited support in browsers, but this is now a thing of the past.
        The only real problem is alpha-transparency in true color PNGs, but then again, GIFs are not true color and don't
        support variable transparency either.
        So anything a GIF can do, a palette PNG (PNG8) can do too (except for animations).
        This simple imagemagick command results in totally safe-to-use
        PNGs:<br />
        <code>convert image.gif image.png</code>
        <br />
        "All we are saying is: Give PiNG a Chance!"
    </li>
    <li class="bullist">
        Run <a href="http://pmt.sourceforge.net/pngcrush/">pngcrush</a> (or any other PNG optimizer tool) on all your PNGs. Example:
        <br />
        <code>pngcrush image.png -rem alla -reduce -brute result.png</code>
    </li>
    <li class="bullist">
        Run jpegtran on all your JPEGs. This tool does lossless JPEG operations such as rotation and can also be used to optimize
        and remove comments and other useless information (such as EXIF information) from your images.
        <br />
        <code>jpegtran -copy none -optimize -perfect src.jpg dest.jpg</code>
    </li>
</ul>

<p><a href="#page-nav">top</a></p>


<h3 id="opt_sprites">Optimize CSS Sprites</h3>

<p class="date">tag: images</p>

<ul>
    <li class="bullist">Arranging the images in the sprite horizontally as opposed to vertically usually results in a smaller file size.</li>
    <li class="bullist">Combining similar colors in a sprite helps you keep the color count low, ideally under 256 colors so to fit in a PNG8.</li>
    <li class="bullist">"Be mobile-friendly" and don't leave big gaps between the images in a sprite. This doesn't affect the file size as much
        but requires less memory for the user agent to decompress the image into a pixel map.
        100x100 image is 10 thousand pixels, where 1000x1000 is 1 million pixels
        </li>
</ul>
<p><a href="#page-nav">top</a></p>


<h3 id="no_scale">Don't Scale Images in HTML</h3>

<p class="date">tag: images</p>

<p>

    Don't use a bigger image than you need just because you can set the width and height in HTML.
    If you need <br />
        <code>&lt;img width="100" height="100" src="mycat.jpg" alt="My Cat" /&gt;</code>
    <br />
    then your image (mycat.jpg) should be 100x100px rather than a scaled down 500x500px image.

</p>
<p><a href="#page-nav">top</a></p>


<h3 id="favicon">Make favicon.ico Small and Cacheable</h3>

<p class="date">tag: images</p>

<p>
    The favicon.ico is an image that stays in the root of your server.
    It's a necessary evil because even if you don't care about it the
    browser will still request it, so it's better not to respond with a <code>404 Not Found</code>.
    Also since it's on the same server, cookies are sent every time it's requested.
    This image also interferes with the download sequence, for example in IE when you request
    extra components in the onload, the favicon will be downloaded before these extra components.
</p>
<p>
    So to mitigate the drawbacks of having a favicon.ico make sure:
</p>
<ul>
    <li class="bullist">It's small, preferably under 1K.</li>
    <li class="bullist">Set Expires header with what you feel comfortable (since you cannot rename it if you decide to change it).
        You can probably safely set the Expires header a few months in the future.
        You can check the last modified date of your current favicon.ico to make an informed decision.
    </li>
</ul>
<p>
    <a href="http://www.imagemagick.org">Imagemagick</a> can help you create small favicons
</p>

<p><a href="#page-nav">top</a></p>


<h3 id="under25">Keep Components under 25K</h3>

<p class="date">tag: mobile</p>
<p>
    This restriction is related to the fact that iPhone won't cache components bigger than 25K.
    Note that this is the <em>uncompressed</em> size. This is where minification is important
    because gzip alone may not be sufficient.
</p>
<p>
    For more information check "<a href="http://yuiblog.com/blog/2008/02/06/iphone-cacheability/">Performance Research, Part 5: iPhone Cacheability - Making it Stick</a>" by Wayne Shea and Tenni Theurer.
</p>
<p><a href="#page-nav">top</a></p>


<h3 id="multipart">Pack Components into a Multipart Document</h3>

<p class="date">tag: mobile</p>

<p>
    Packing components into a multipart document is like an email with attachments,
    it helps you fetch several components with one HTTP request (remember: HTTP requests are expensive).
    When you use this technique, first check if the user agent supports it (iPhone does not).

</p>


<h3 id="emptysrc">Avoid Empty Image src</h3>

<p class="date">tag: server</p>

<p>

Image with empty string <b>src</b> attribute occurs more than one will expect. It appears in two form: 
<ol>
<li>straight HTML<br>
<blockquote>&lt;img src=""&gt;</blockquote></li>
<li>JavaScript<br>
<blockquote>var img = new Image();<br>
img.src = "";</blockquote>
</li>
</ol>
</p>

<p>
Both forms cause the same effect: browser makes another request to your server.
<ul>
<li class="bullist"><b>Internet Explorer</b> makes a request to the directory in which the page is located.</li>
<li class="bullist"><b>Safari and Chrome</b> make a request to the actual page itself.</li>
<li class="bullist"><b>Firefox</b> 3 and earlier versions behave the same as Safari and Chrome, but version 3.5 addressed this issue<a href="https://bugzilla.mozilla.org/show_bug.cgi?id=444931">[bug 444931]</a> and no longer sends a request.</li>
<li class="bullist"><b>Opera</b> does not do anything when an empty image src is encountered.</li>
</ul>
</p>
<br/>
<p>
<b>Why is this behavior bad? </b>
<ol>
<li>Cripple your servers by sending a large amount of unexpected traffic, especially for pages that get millions of page views per day.</li>
<li>Waste server computing cycles generating a page that will never be viewed.</li>
<li>Possibly corrupt user data. If you are tracking state in the request, either by cookies or in another way, you have the possibility of destroying data. Even though the image request does not return an image, all of the headers are read and accepted by the browser, including all cookies. While the rest of the response is thrown away, the damage may already be done.</li>
</ol>
</p>
<br/>
<p>
The root cause of this behavior is the way that URI resolution is performed in browsers. 
This behavior is defined in RFC 3986 - Uniform Resource Identifiers. 
When an empty string is encountered as a URI, it is considered a relative URI and is resolved according to the algorithm defined in section 5.2. This specific example, an empty string, is listed in section 5.4. Firefox, Safari, and Chrome are all resolving an empty string correctly per the specification, while Internet Explorer is resolving it incorrectly, apparently in line with an earlier version of the specification, RFC 2396 - Uniform Resource Identifiers (this was obsoleted by RFC 3986). So technically, the browsers are doing what they are supposed to do to resolve relative URIs. The problem is that in this context, the empty string is clearly unintentional.
</p>

<p>
HTML5 adds to the description of the <img> tag's src  attribute to instruct browsers not to make an additional request in section 4.8.2:

<blockquote>
    The src attribute must be present, and must contain a valid URL referencing a non-interactive, optionally animated, image resource that is neither paged nor scripted. If the base URI of the element is the same as the document's address, then the src attribute's value must not be the empty string.
</blockquote>

Hopefully, browsers will not have this problem in the future. Unfortunately, there is no such clause for &lt;script src=""&gt; and &lt;link href=""&gt;. Maybe there is still time to make that adjustment to ensure browsers don't accidentally implement this behavior.
</p>
<p>
    This rule was inspired by Yahoo!'s JavaScript guru Nicolas C. Zakas.  For more information check out his article "<a href="http://www.nczonline.net/blog/2009/11/30/empty-image-src-can-destroy-your-site/">Empty image src can destroy your site</a>".
</p>

<p><a href="#page-nav">top</a></p>

                        </div>
                    </div>

                    <div class="yui-b" id="ydnRack">
                        
<div id="recentBlogArtsBox" class="">
    <span class="getAppHBl">
        <h4 class="recentBlog">
            Recent Blog Articles            <a href="http://pipes.yahoo.com/pipes/pipe.run?_id=0e60ed1354d36a4fdaac34bf72615993&_render=rss" class="rssImg"><img src="http://l.yimg.com/a/i/nt/ic/ut/bsc/rss16_1.gif"></a>
        </h4>
                <span class="viewallAbs"><a href="http://developer.yahoo.com/blogs/ydn/categories/performance/">view all</a></span>
            </span>
    <div class="bd">
<p class="blogRackTitle"><a href="http://www.yuiblog.com/blog/2012/08/27/shifter-fast-yui-module-building/">Shifter, fast YUI module building</a></p>
<p class="blogRackDate">Mon, 27 Aug 2012 </p>
<p class="blogRackTitle"><a href="http://developer.yahoo.com/blogs/ydn/posts/2012/02/welcome-yslow-open-source/">Welcome YSlow Open Source</a></p>
<p class="blogRackDate">Thu, 16 Feb 2012 </p>
<p class="blogRackTitle"><a href="http://developer.yahoo.com/blogs/ydn/posts/2011/11/flickrs-new-dynamic-content-acceleration/">Flickr’s New Dynamic Content Acceleration</a></p>
<p class="blogRackDate">Wed, 30 Nov 2011 </p>
<p class="blogRackTitle"><a href="http://developer.yahoo.com/blogs/ydn/posts/2011/11/yahoo-announces-cocktails-%e2%80%93-shaken-not-stirred/">Yahoo! Announces Cocktails – Shaken, Not Stirred</a></p>
<p class="blogRackDate">Wed, 02 Nov 2011 </p>
<p class="blogRackTitle"><a href="http://www.yuiblog.com/blog/2011/07/18/next-gen-yslow-powered-by-yui/">Next-Gen YSlow powered by YUI</a></p>
<p class="blogRackDate">Tue, 19 Jul 2011 </p>
    </div>
</div>

<div id="recentBlogArtsBox" class="">
    <span class="getAppHBl">
        <h4 class="recentBlog">
            <a href="http://tech.groups.yahoo.com/group/exceptional-performance/">Yahoo! Groups Discussions</a>
            <a href="http://rss.groups.yahoo.com/group/exceptional-performance/rss" class="rssImg">
                <img src="http://l.yimg.com/a/i/nt/ic/ut/bsc/rss16_1.gif">
            </a>
        </h4>
        <span class="viewallAbs"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/">view all</a></span>
    </span>
    <div class="bd">
<p class="blogRackTitle"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/message/2041">smush.it - No files were uploaded</a></p>
<p class="blogRackDate">Thu, 27 Sep 2012 </p>
<p class="blogRackTitle"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/message/2040">Everything I try to smush just stays in the smushing state?</a></p>
<p class="blogRackDate">Thu, 27 Sep 2012 </p>
<p class="blogRackTitle"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/message/2039">smushit.com and smush.it down</a></p>
<p class="blogRackDate">Thu, 27 Sep 2012 </p>
<p class="blogRackTitle"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/message/2038">Re: YSlow Primed Cache graph appears incorrect</a></p>
<p class="blogRackDate">Wed, 18 Jul 2012 </p>
<p class="blogRackTitle"><a href="http://tech.groups.yahoo.com/group/exceptional-performance/message/2037">YSlow Primed Cache graph appears incorrect</a></p>
<p class="blogRackDate">Mon, 16 Jul 2012 </p>
    </div>
</div>
                    </div>
                </div>

                <div id="ft">
                    
<!-- footer -->
<div id="ydn-footer">
  <ul class="ydn-ext22">
    <li class="ydn-ext-fb22">
	  <a href="http://www.facebook.com/yahoodevelopernetwork" title="Facebook">Facebook</a>
	</li>
    <li class="ydn-ext-tw22">
	  <a href="http://twitter.com/ydn" title="Twitter">Twitter</a>
	</li>
    <li class="ydn-ext-fl22">
      <a href="http://www.flickr.com/photos/ydn" title="Flickr">Flickr</a>
    </li>
    <li class="ydn-ext-git22">
      <a href="http://github.com/yahoo/" title="GitHub">GitHub</a>
    </li>
    <li class="ydn-ext-rss22">
      <a href="http://feeds.developer.yahoo.net/YDNBlog" title="YDN Blog">YDN Blog</a>
    </li>
  </ul>
  <span>Follow Yahoo! Developer Network on</span>
  <ul class="ydn-breadcrumb" role="navigation">
  <li><a href="http://developer.yahoo.com/">Developer</a></li>  <li class="ydn-separater"><a href="http://developer.yahoo.com/everything.html">APIs & Tools</a></li>  <li class="ydn-separater"><a href="/performance/">Performance</a></li>  <li class="ydn-separater">Rules</li>
</ul>
  <div class="ydn-footer-content" role="contentinfo">Copyright &copy; 2012 Yahoo! Inc. All rights reserved.</div>
  <ul class="ydn-tou">
    <li><a href="http://info.yahoo.com/copyright/us/details.html">Copyright</a></li>
    <li class="ydn-divider-left"><a href="http://info.yahoo.com/privacy/us/yahoo/devel/details.html">Privacy Policy</a></li>
    <li class="ydn-divider-left"><a href="http://info.yahoo.com/legal/us/yahoo/api/api-2140.html">Terms of Use</a></li>
  </ul>
  <ul class="ydn-contact">
    <li><a href="http://developer.yahoo.com/register/">Contact Us</a></li>
    <li class="ydn-divider-left"><a href="http://developer.yahoo.net/forum/">Community</a></li>
    <li class="ydn-divider-left"><a href="http://developer.yahoo.net/forum/?showforum=22">Suggestions</a></li>
  </ul>
</div>
<!-- end footer -->
                </div>
            </div>
        </div>

        <script language="javascript" type="text/javascript" src="http://l.yimg.com/a/combo?/yui/2.9.0/build/yahoo-dom-event/yahoo-dom-event.js&/yui/2.6.0/build/animation/animation-min.js&/yui/2.6.0/build/container/container-min.js&/yui/2.5.2/build/menu/menu-min.js&/yui/2.9.0/build/element/element-min.js&/yui/2.6.0/build/treeview/treeview-min.js&/yui/2.6.0/build/connection/connection-min.js&/yui/2.6.0/build/json/json-min.js&/yui/2.6.0/build/dragdrop/dragdrop-min.js&/yui/2.6.0/build/selector/selector-beta-min.js&/yui/2.5.2/build/tabview/tabview-min.js&/yui/2.9.0/build/button/button-min.js&/yui/2.6.0/build/get/get-min.js&/yui/2.6.0/build/datasource/datasource-min.js&/yui/2.6.0/build/datatable/datatable-min.js&/ydn/site/ydn-105031.js&/ydn/site/ywa-509.js&"></script>

<script src="http://l.yimg.com/ss/rapid_2.5.0.js"></script>
<script> var keys = {A_pn:'http://developer.yahoo.com/performance/rules.html?'}; var conf = {spaceid:792400042, tracked_mods:['content-wrp'], keys:keys, ywa: { project_id: 10001393677061 }};	var ins = new YAHOO.i13n.Track(conf); 
	ins.init(); 
</script> <!-- Yahoo! Web Analytics - All rights reserved -->
<script type="text/javascript">
  // ywa.js included with combo handler; make tracker call now
  var YWATracker = YWA.getTracker("10001393677061");
  YWATracker.submit();
</script>
<noscript>
 <div>
  <img src="http://a.analytics.yahoo.com/p.pl?a=10001393677061&amp;js=no" width="1" height="1" alt="" />
 </div>
</noscript>
<!-- End of Yahoo! Web Analytics Code -->    </body>
</html>

<script type="text/javascript"src="http://l.yimg.com/d/lib/rt/rto1_78.js"></script><script>var rt_page="792403740:FRTMA"; varrt_ip="64.143.122.254";if ("function" == typeof(rt_AddVar) ){ rt_AddVar("ys", escape("19198B62")); rt_AddVar("cr", escape("lSnFo.FPsKS"));rt_AddVar("sg", escape("/SIG=11ppllem6585clfp7p9g9g&b=3&s=2l/1350126324/64.143.122.254/19198B62")); rt_AddVar("yd", escape("3370722586"));}</script><noscript><img src="http://rtb.pclick.yahoo.com/images/nojs.gif?p=792403740:FRTMA"></noscript><!-- SpaceID=792403740 loc=FSRVY noad -->
<script language=javascript>
if(window.yzq_d==null)window.yzq_d=new Object();
window.yzq_d['AV1yDGKL5Mg-']='&U=12d6rrcpb%2fN%3dAV1yDGKL5Mg-%2fC%3d-1%2fD%3dFSRVY%2fB%3d-1%2fV%3d0';
</script><noscript><img width=1 height=1 alt="" src="http://us.bc.yahoo.com/b?P=NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx&T=181cdtse6%2fX%3d1350126324%2fE%3d792403740%2fR%3ddev_net%2fK%3d5%2fV%3d2.1%2fW%3dH%2fY%3dYAHOO%2fF%3d2145999126%2fH%3dc2VydmVJZD0iTmJPN29HS0xHVWxVRlpWLlQ1VEJNQXRLUUk5Nl9sQjVTdlFBQlF0eCIgc2l0ZUlkPSI0NDY1NTUxIiB0U3RtcD0iMTM1MDEyNjMyNDM1NzMyNiIg%2fQ%3d-1%2fS%3d1%2fJ%3d19198B62&U=12d6rrcpb%2fN%3dAV1yDGKL5Mg-%2fC%3d-1%2fD%3dFSRVY%2fB%3d-1%2fV%3d0"></noscript><script language=javascript>
if(window.yzq_d==null)window.yzq_d=new Object();
window.yzq_d['_1xyDGKL5Mg-']='&U=13eng3gn9%2fN%3d_1xyDGKL5Mg-%2fC%3d289534.9603437.10326224.9298098%2fD%3dFOOT%2fB%3d4123617%2fV%3d1';
</script><noscript><img width=1 height=1 alt="" src="http://us.bc.yahoo.com/b?P=NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx&T=181bqrmbc%2fX%3d1350126324%2fE%3d792403740%2fR%3ddev_net%2fK%3d5%2fV%3d2.1%2fW%3dH%2fY%3dYAHOO%2fF%3d2168239784%2fH%3dc2VydmVJZD0iTmJPN29HS0xHVWxVRlpWLlQ1VEJNQXRLUUk5Nl9sQjVTdlFBQlF0eCIgc2l0ZUlkPSI0NDY1NTUxIiB0U3RtcD0iMTM1MDEyNjMyNDM1NzMyNiIg%2fQ%3d-1%2fS%3d1%2fJ%3d19198B62&U=13eng3gn9%2fN%3d_1xyDGKL5Mg-%2fC%3d289534.9603437.10326224.9298098%2fD%3dFOOT%2fB%3d4123617%2fV%3d1"></noscript><!--QYZ ,;;;792403740;;-->
<!-- VER-3.0.225673 -->
<script language=javascript>
if(window.yzq_p==null)document.write("<scr"+"ipt language=javascript src=http://l.yimg.com/d/lib/bc/bc_2.0.5.js></scr"+"ipt>");
</script><script language=javascript>
if(window.yzq_p)yzq_p('P=NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx&T=17rbm5lpp%2fX%3d1350126324%2fE%3d792403740%2fR%3ddev_net%2fK%3d5%2fV%3d1.1%2fW%3dJ%2fY%3dYAHOO%2fF%3d459693008%2fH%3dc2VydmVJZD0iTmJPN29HS0xHVWxVRlpWLlQ1VEJNQXRLUUk5Nl9sQjVTdlFBQlF0eCIgc2l0ZUlkPSI0NDY1NTUxIiB0U3RtcD0iMTM1MDEyNjMyNDM1NzMyNiIg%2fS%3d1%2fJ%3d19198B62');
if(window.yzq_s)yzq_s();
</script><noscript><img width=1 height=1 alt="" src="http://us.bc.yahoo.com/b?P=NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx&T=1816siarp%2fX%3d1350126324%2fE%3d792403740%2fR%3ddev_net%2fK%3d5%2fV%3d3.1%2fW%3dJ%2fY%3dYAHOO%2fF%3d4269135623%2fH%3dc2VydmVJZD0iTmJPN29HS0xHVWxVRlpWLlQ1VEJNQXRLUUk5Nl9sQjVTdlFBQlF0eCIgc2l0ZUlkPSI0NDY1NTUxIiB0U3RtcD0iMTM1MDEyNjMyNDM1NzMyNiIg%2fQ%3d-1%2fS%3d1%2fJ%3d19198B62"></noscript><script language=javascript>
(function(){window.xzq_p=function(R){M=R};window.xzq_svr=function(R){J=R};function F(S){var T=document;if(T.xzq_i==null){T.xzq_i=new Array();T.xzq_i.c=0}var R=T.xzq_i;R[++R.c]=new Image();R[R.c].src=S}window.xzq_sr=function(){var S=window;var Y=S.xzq_d;if(Y==null){return }if(J==null){return }var T=J+M;if(T.length>P){C();return }var X="";var U=0;var W=Math.random();var V=(Y.hasOwnProperty!=null);var R;for(R in Y){if(typeof Y[R]=="string"){if(V&&!Y.hasOwnProperty(R)){continue}if(T.length+X.length+Y[R].length<=P){X+=Y[R]}else{if(T.length+Y[R].length>P){}else{U++;N(T,X,U,W);X=Y[R]}}}}if(U){U++}N(T,X,U,W);C()};function N(R,U,S,T){if(U.length>0){R+="&al="}F(R+U+"&s="+S+"&r="+T)}function C(){window.xzq_d=null;M=null;J=null}function K(R){xzq_sr()}function B(R){xzq_sr()}function L(U,V,W){if(W){var R=W.toString();var T=U;var Y=R.match(new RegExp("\\\\(([^\\\\)]*)\\\\)"));Y=(Y[1].length>0?Y[1]:"e");T=T.replace(new RegExp("\\\\([^\\\\)]*\\\\)","g"),"("+Y+")");if(R.indexOf(T)<0){var X=R.indexOf("{");if(X>0){R=R.substring(X,R.length)}else{return W}R=R.replace(new RegExp("([^a-zA-Z0-9$_])this([^a-zA-Z0-9$_])","g"),"$1xzq_this$2");var Z=T+";var rv = f( "+Y+",this);";var S="{var a0 = '"+Y+"';var ofb = '"+escape(R)+"' ;var f = new Function( a0, 'xzq_this', unescape(ofb));"+Z+"return rv;}";return new Function(Y,S)}else{return W}}return V}window.xzq_eh=function(){if(E||I){this.onload=L("xzq_onload(e)",K,this.onload,0);if(E&&typeof (this.onbeforeunload)!=O){this.onbeforeunload=L("xzq_dobeforeunload(e)",B,this.onbeforeunload,0)}}};window.xzq_s=function(){setTimeout("xzq_sr()",1)};var J=null;var M=null;var Q=navigator.appName;var H=navigator.appVersion;var G=navigator.userAgent;var A=parseInt(H);var D=Q.indexOf("Microsoft");var E=D!=-1&&A>=4;var I=(Q.indexOf("Netscape")!=-1||Q.indexOf("Opera")!=-1)&&A>=4;var O="undefined";var P=2000})();
</script><script language=javascript>
if(window.xzq_svr)xzq_svr('http://csc.beap.bc.yahoo.com/');
if(window.xzq_p)xzq_p('yi?bv=1.0.0&bs=(128ol5kl7(gid$NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx,st$1350126324357326,v$1.0))&t=J_3-D_3');
if(window.xzq_s)xzq_s();
</script><noscript><img width=1 height=1 alt="" src="http://csc.beap.bc.yahoo.com/yi?bv=1.0.0&bs=(128ol5kl7(gid$NbO7oGKLGUlUFZV.T5TBMAtKQI96_lB5SvQABQtx,st$1350126324357326,v$1.0))&t=J_3-D_3"></noscript>
<!-- p2.ydn.bf1.yahoo.com compressed/chunked Sat Oct 13 04:05:24 PDT 2012 -->
